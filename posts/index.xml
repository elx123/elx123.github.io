<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on HACKER</title>
    <link>https://elx123.github.io/posts/</link>
    <description>Recent content in Posts on HACKER</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
	<atom:link href="https://elx123.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://elx123.github.io/posts/seh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elx123.github.io/posts/seh/</guid>
      <description>SEH OS异常处理的办法 异常 SEH详细说明 SEH是window操作系统默认的异常处理机制，逆向分析中，SEH除了基本的异常处理功能外，还大量用于</description>
    </item>
    
    <item>
      <title></title>
      <link>https://elx123.github.io/posts/anticheatone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elx123.github.io/posts/anticheatone/</guid>
      <description>转载自 简介 注入姿势 处理检测CALL https://bbs.pediy.com/thread-249303.htm 1.稳定注入姿势 2.处理TenRpcs检测CLL 3.处理TCJ 4.探测GameRpcs 笔者最近迷上LOL</description>
    </item>
    
    <item>
      <title></title>
      <link>https://elx123.github.io/posts/anticheatthree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elx123.github.io/posts/anticheatthree/</guid>
      <description>转载自 正文 https://bbs.pediy.com/thread-249348.htm 代码段没法发了，因为里面有别人的东西（发了之后避免不了一些不法分子会利用，所以这里只分享处理检测流程和思路） 目前整体已经完善好了</description>
    </item>
    
    <item>
      <title></title>
      <link>https://elx123.github.io/posts/anticheattwo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elx123.github.io/posts/anticheattwo/</guid>
      <description>转载自 正文 https://bbs.pediy.com/thread-249309.htm 回顾一下前文提到的东西 游戏主要检测分为5大块 1.CALL检测 -由TenRpcs负责 2.文件及内存检测 - 由TCJ负责 3.客户行为游</description>
    </item>
    
    <item>
      <title>&#34;About&#34;</title>
      <link>https://elx123.github.io/posts/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elx123.github.io/posts/about/</guid>
      <description>人生苦短,只争朝夕,浮生若梦,为欢几何</description>
    </item>
    
    <item>
      <title>Excel学习</title>
      <link>https://elx123.github.io/posts/excellearning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elx123.github.io/posts/excellearning/</guid>
      <description>简介 通过百度网盘的形式在国内观看 目录 Excel Finance Class 01: Intro To Excel 2007 &amp; 2010(excel 金融课程01 视频地址(国外) 国内地址(百度网盘) 配套练习地址(已存百度网盘) 外网 ex</description>
    </item>
    
    <item>
      <title>Golang Sort</title>
      <link>https://elx123.github.io/posts/golang_sort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elx123.github.io/posts/golang_sort/</guid>
      <description>简介 示例 在实际项目中用到对结构按结构体中的某个字段进行排序，记录下使用心得 首先定义数据结构，为了能清楚说明问题，只给两个字段。 type User struct { Name string Score</description>
    </item>
    
    <item>
      <title>Golang float</title>
      <link>https://elx123.github.io/posts/float64/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elx123.github.io/posts/float64/</guid>
      <description>简介 两个浮点数相加减，可能不准确 相减 最近在工作遇到float的精度问题,记录下解决思路 浮点数数据格式有许多种,IEEE754标准的浮点数与I</description>
    </item>
    
    <item>
      <title>Golang位运算符的溢出情况</title>
      <link>https://elx123.github.io/posts/golang_/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elx123.github.io/posts/golang_/</guid>
      <description>简介 介绍 直接表现为 反例 在编码过程中,经常会遇到使用逻辑运算符的情况,其中对于溢出操作需要特别小心 编译型语言，编译器的静态求值是自然的。 必须使</description>
    </item>
    
    <item>
      <title>MySQL Benchmark Tool</title>
      <link>https://elx123.github.io/posts/sysbench/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elx123.github.io/posts/sysbench/</guid>
      <description>sysbench 源码地址 部分参数涵义(github) events warmup-time percentile luajit-cmd 什么是JIT db-ps-mode tables table_size fileio模块 以vultr上vps以测试例子 sysbench是mysql的</description>
    </item>
    
    <item>
      <title>Tcp分包</title>
      <link>https://elx123.github.io/posts/tcp_subcontracting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elx123.github.io/posts/tcp_subcontracting/</guid>
      <description>简介 问题描述 解法一(peek方式) 如今的游戏服务器框架都会涉及到Tcp分包,今天记录下自己的心得 Tcp长连接,通过分包解决粘包问题 大体思路:</description>
    </item>
    
    <item>
      <title>Weighted Random Selection</title>
      <link>https://elx123.github.io/posts/weightsort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elx123.github.io/posts/weightsort/</guid>
      <description>简介 问题描述 解决思路 伪码 最近在项目中遇到了加密权重算法,记录下使用心得 Given a list of items where each item has a weight (integer value), select a random item from the list based on that weight. The key requirement — items with a higher weight value are</description>
    </item>
    
    <item>
      <title>[转载]Golang Json库源码</title>
      <link>https://elx123.github.io/posts/golang_json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elx123.github.io/posts/golang_json/</guid>
      <description>简介 介绍 基本规则 最近发现一篇关于golang原生Json库的文章,转载过来\\ https://zhuanlan.zhihu.com/p/37165706 encoding/json库的意义相对其他语言来说在Gola</description>
    </item>
    
    <item>
      <title>[转载]mgo 的 session 与连接池</title>
      <link>https://elx123.github.io/posts/mgoandsession/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elx123.github.io/posts/mgoandsession/</guid>
      <description>简介 介绍 简单的使用 最近发现一篇关于mgo连接池很有价值的文章,转载过来\\ https://cardinfolink.github.io/2017/05/17/mgo-session/ mgo是由Golang编写的开源mongodb驱动。由于mong</description>
    </item>
    
    <item>
      <title>go-mgo/mgo入门</title>
      <link>https://elx123.github.io/posts/mgo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elx123.github.io/posts/mgo/</guid>
      <description>简介 源码 使用Select方法和struct区别 假如我们要在xxxx表中只取出Value字段 使用select 在游戏服务器开发这一块,nosql</description>
    </item>
    
    <item>
      <title>go包管理器</title>
      <link>https://elx123.github.io/posts/package/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elx123.github.io/posts/package/</guid>
      <description>简介 问题描述 使用心得 glide glide.yaml和glide.lock 如何管理local包 Glide can handle private packages using the repo property. The packages that need manual building.... vendor/ 分别记录下glide和d</description>
    </item>
    
    <item>
      <title>gpc learning</title>
      <link>https://elx123.github.io/posts/rpclearning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elx123.github.io/posts/rpclearning/</guid>
      <description>简介 学习视频 grpc 学习记录 Master Class: Build Modern API and Microservices</description>
    </item>
    
    <item>
      <title>redis/go-redis入门</title>
      <link>https://elx123.github.io/posts/redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elx123.github.io/posts/redis/</guid>
      <description>简介 资料 redis基础结构认识 key-value 最近开始研究redis 视频课程Rapid redis \\ golang下驱动https://github.com/go-r</description>
    </item>
    
    <item>
      <title>windows内核以及驱动</title>
      <link>https://elx123.github.io/posts/windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elx123.github.io/posts/windows/</guid>
      <description>简介 补上相关知识 这本书是现代windows驱动开发必看的 其他可以参考老外的黑客论坛 之前一段时间一直在研究windows相关的技术(驱动,ke</description>
    </item>
    
    <item>
      <title>优先队列</title>
      <link>https://elx123.github.io/posts/priorityqueue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elx123.github.io/posts/priorityqueue/</guid>
      <description>简介 实现方式 堆 实现 最近在多个框架中遇到优先队列,在这里记录下原理 目前只知道顺序数组可以用来作为heap底层结构,以实现优先队列 // An Item is something we manage</description>
    </item>
    
  </channel>
</rss>